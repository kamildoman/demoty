[{"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\index.js":"1","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\App.js":"2","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\reportWebVitals.js":"3","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\Demot.jsx":"4","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\Navbar.jsx":"5","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\Pagination.jsx":"6","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\SinglePageDemot.jsx":"7","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\SingleComment.jsx":"8","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\AddDemotModal.jsx":"9","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\LoginOrLogout.jsx":"10","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\RegisterModal.jsx":"11","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\LoginModal.jsx":"12"},{"size":544,"mtime":1640164911755,"results":"13","hashOfConfig":"14"},{"size":2467,"mtime":1641468615947,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1640000782045,"results":"16","hashOfConfig":"14"},{"size":3312,"mtime":1641468636548,"results":"17","hashOfConfig":"14"},{"size":1181,"mtime":1641463795606,"results":"18","hashOfConfig":"14"},{"size":854,"mtime":1640165726644,"results":"19","hashOfConfig":"14"},{"size":3171,"mtime":1641468701933,"results":"20","hashOfConfig":"14"},{"size":831,"mtime":1641468683269,"results":"21","hashOfConfig":"14"},{"size":2604,"mtime":1641468596137,"results":"22","hashOfConfig":"14"},{"size":1692,"mtime":1641467057430,"results":"23","hashOfConfig":"14"},{"size":3182,"mtime":1641468674178,"results":"24","hashOfConfig":"14"},{"size":1718,"mtime":1641468650426,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"11euxga",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\index.js",[],["55","56"],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\App.js",["57"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Demot from \"./Demot\"\nimport Navbar from './Navbar'\nimport Pagination from './Pagination'\nimport SinglePageDemot from \"./SinglePageDemot\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [demots, setDemots] = useState([])\n  const [username, setUsername] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const getToken = () => {\n    let header = {\n      'Authorization': 'Token ' + localStorage.getItem('LoginToken')}\n\n      axios.get('/user/', {headers: header,\n      }).then(res => {\n        let username = res.data.username.substring(0, 10)\n        setUsername(username)\n      }).catch(e => {\n        if (e.response.status > 300){\n            setUsername(\"Anonymous\")\n        }\n    })\n    }\n\n  const refreshList = () => {\n      axios.get('/api/demots/')\n      .then(function (response) {\n        setDemots(response.data.reverse()) \n      })\n      setTimeout(function() { getToken(); }, 1000);\n    };\n\n    useEffect(() => {\n      refreshList()\n      getToken()\n    }, [])\n    \n    const indexOfLastPost = currentPage * postsPerPage\n    const indexOfFirstPost = indexOfLastPost - postsPerPage\n    const currentPosts = demots.slice(indexOfFirstPost, indexOfLastPost)\n\n    function paginate(pageNumber){\n      setCurrentPage(pageNumber)\n    }\n\n    return (<Router><div>\n              <Navbar setCurrentPage={setCurrentPage} refresh={refreshList} username={username}/>\n              <div className=\"main\">\n              <Routes>\n              <Route path=\"/\" exact element= {<>{currentPosts.map(demot =>(\n              <Demot\n              key= {demot.id} \n              id = {demot.id}\n              whole = {true}\n              title={demot.title}\n              subtitle={demot.subtitle}  \n              image={demot.image}\n              upvote={demot.upvote}\n              downvote={demot.downvote}\n              ips={demot.ips}\n              owner={demot.owner}\n              />\n            ))}<Pagination \n            postsPerPage={postsPerPage} \n            totalPosts={demots.length} \n            paginate={paginate}  \n            /></>} />\n\n            <Route path=\"/demot/:id\" element={<SinglePageDemot />} />\n            </Routes>\n            \n            </div>\n           \n            </div></Router>)\n    \n  }\n\nexport default App;\n","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\reportWebVitals.js",[],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\Demot.jsx",["58"],"import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Demot(props){\r\n    var [totalVote, setTotalVote] = useState(props.upvote - props.downvote)\r\n    var [upVote, setUpVote] = useState(props.upvote)\r\n    var [downVote, setDownVote] = useState(props.downvote)\r\n    const [ip, setIP] = useState('');\r\n    const [isAdded, setIsAdded] = useState(false)\r\n    const [owner, setOwner] = useState(\"\")\r\n\r\n    function getOwner(){\r\n        if (props.owner == null){\r\n            setOwner(\"Anonymous User\")\r\n        }\r\n        else {\r\n            axios.get('/api/all-users/' + props.owner +'/')\r\n            .then(res => {\r\n                setOwner(res.data.username)\r\n            })\r\n        }\r\n    }\r\n\r\n    const getIPData = async () => {\r\n        const res = await axios.get('https://geolocation-db.com/json/')\r\n        console.log(res.data.IPv4);\r\n        setIP(res.data.IPv4)\r\n      }\r\n\r\n      useEffect( () => {\r\n        getIPData()\r\n        getOwner()\r\n    \r\n      }, [])\r\n      var ip_to_add = props.ips + \", \" + ip\r\n\r\n    function voteUp(){\r\n        if (isAdded === false){\r\n            if (props.ips == null || !props.ips.includes(ip)){\r\n                setIsAdded(true)\r\n                setUpVote(upVote += 1)   \r\n                axios.put('/api/demots/' + props.id + '/', {title: props.title, upvote: upVote, ips: ip_to_add})\r\n                setTotalVote(totalVote +=1)\r\n            }\r\n            else{\r\n                alert(\"You already voted!\")\r\n            }\r\n        }\r\n        else {\r\n            alert(\"You can vote only once!\")\r\n        }\r\n        };\r\n\r\n    function voteDown(){\r\n        if (isAdded === false){\r\n            if (props.ips == null || !props.ips.includes(ip)){\r\n                setIsAdded(true)\r\n                setDownVote(downVote += 1)\r\n                axios.put('/api/demots/' + props.id + '/', {title: props.title, downvote: downVote, ips: ip_to_add})\r\n                setTotalVote(totalVote -=1)\r\n            }\r\n            else{\r\n                alert(\"You already voted!\")\r\n            }\r\n        }\r\n        else {\r\n            alert(\"You can vote only once!\")\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function ButtonPlus(){\r\n\r\n        return (<button onClick={() =>{\r\n            voteUp()\r\n        }} className=\"plus buttonMark\">+</button>)\r\n    }\r\n\r\n    function ButtonMinus(){\r\n        return (<button onClick={() =>{\r\n            voteDown()\r\n}}\r\n            className=\"minus buttonMark\">-</button>)\r\n    }\r\n\r\n    if (props.whole === true){\r\n        return <div className=\"whole-demot\">\r\n                <Link to={`/demot/${props.id}`} className=\"demot\">\r\n                    <img alt=\"demot\" className=\"demot-img\" src={props.image} /><h2>{props.title}</h2><h3>{props.subtitle}</h3>\r\n                </Link><ButtonPlus /><ButtonMinus /><div>Total: {totalVote}</div>\r\n                <div className=\"by-who\">By {owner}</div>\r\n                </div>\r\n            }\r\n    else if (props.whole === false){\r\n        return <div className=\"demotMini\">\r\n                <div className=\"demot-small\">\r\n                    <img alt=\"demot\" className=\"demot-small-img\" src={props.image} /><h4>{props.title}</h4><h6>{props.subtitle}</h6>\r\n                </div>\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default Demot","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\Navbar.jsx",[],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\Pagination.jsx",[],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\SinglePageDemot.jsx",["59"],"import React, {useState, useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport Demot from './Demot';\r\nimport SingleComment from './SingleComment';\r\n\r\nconst SinglePageDemot = () => {\r\n    const {id} = useParams();\r\n    const [demot, setDemot] = useState(\"\")\r\n    const [comments, setComments] = useState([])\r\n    const [doesExist, setDoesExist] = useState(true)\r\n    const [commentValue, setCommentValue] = useState(\"\")\r\n\r\n    function handleCommentChange(event){\r\n        setCommentValue(event.target.value)\r\n    }\r\n\r\n    function addComment(){\r\n        var formData = new FormData();\r\n\r\n        let token = localStorage.getItem('LoginToken')\r\n\r\n        formData.append(\"token\", token)\r\n        formData.append(\"comment_text\", commentValue);\r\n        formData.append(\"demot\", id);\r\n        setCommentValue(\"\")\r\n        \r\n        axios.post('/api/comments/', formData)\r\n        setTimeout(getComments, 1000)\r\n    }\r\n\r\n    function getComments(){\r\n        let results = []\r\n        axios.get('/api/comments/')\r\n        .then(function(response){\r\n            response.data.forEach(comment => {\r\n                if (comment.demot === Number(id)){\r\n                    results.push(comment)\r\n                }\r\n            })\r\n            setComments(results.reverse())\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function getData(){\r\n            axios.get('/api/demots/' + id +'/')\r\n            .then(function (response) {\r\n                    console.log(response.data)\r\n                    setDemot(response?.data) \r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 404){\r\n                    setDoesExist(false)\r\n                }\r\n            })\r\n        }\r\n       \r\n\r\n        getData();\r\n        getComments();\r\n        \r\n      }, [id])\r\n      if (doesExist){\r\n        return (\r\n            <div>\r\n                <Demot\r\n                  key= {demot.id} \r\n                  id = {demot.id}\r\n                  whole = {true}\r\n                  title={demot.title}\r\n                  subtitle={demot.subtitle}  \r\n                  image={demot.image}\r\n                  upvote={demot.upvote}\r\n                  downvote={demot.downvote}\r\n                  ips={demot.ips}\r\n                  owner={demot.owner}\r\n                  />\r\n                  <div>\r\n                    <input \r\n                    id=\"comments-input\" onChange={handleCommentChange} value={commentValue} placeholder=\"Add a comment...\" />\r\n                    <button type=\"submit\" onClick={addComment}     \r\n                    className=\"comments-button\">Post</button>\r\n                </div>\r\n                  {comments.map(comment => (\r\n                      <SingleComment \r\n                          key={comment.id}\r\n                          text={comment.comment_text}\r\n                          date={comment.date}\r\n                          owner={comment.owner}\r\n                      />\r\n                  ))}\r\n            </div>\r\n        )\r\n      }\r\n      else {\r\n          return <div><h2>Sorry, it doesn't exist</h2></div>\r\n      }\r\n    \r\n}\r\n\r\nexport default SinglePageDemot\r\n","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\SingleComment.jsx",["60"],"import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst SingleComment = (props) => {\r\n\r\n    const [owner, setOwner] = useState(\"\")\r\n\r\n    let date = props.date.split('T')[0]\r\n    let time = props.date.split('T')[1].split(\".\")[0]\r\n\r\n    function getOwner(){\r\n        if (props.owner == null){\r\n            setOwner(\"Anonymous User\")\r\n        }\r\n        else {\r\n            axios.get('/api/all-users/' + props.owner +'/')\r\n            .then(res => {\r\n                setOwner(res.data.username)\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        getOwner()\r\n    \r\n      }, [])\r\n\r\n    return (\r\n        <div className='comment'>\r\n        <p className='comment-user-date'>{owner} - {date}, {time}</p>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComment\r\n","C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\AddDemotModal.jsx",[],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\LoginOrLogout.jsx",[],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\RegisterModal.jsx",[],"C:\\Users\\login\\Documents\\python\\demotywatory\\demoty\\src\\LoginModal.jsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":49,"column":8,"nodeType":"67","endLine":49,"endColumn":10,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":35,"column":10,"nodeType":"67","endLine":35,"endColumn":12,"suggestions":"70"},{"ruleId":"65","severity":1,"message":"71","line":63,"column":10,"nodeType":"67","endLine":63,"endColumn":14,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"69","line":26,"column":10,"nodeType":"67","endLine":26,"endColumn":12,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshList'. Either include it or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has a missing dependency: 'getOwner'. Either include it or remove the dependency array.",["77"],"React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["78"],["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"82","fix":"86"},"Update the dependencies array to be: [refreshList]",{"range":"87","text":"88"},"Update the dependencies array to be: [getOwner]",{"range":"89","text":"90"},"Update the dependencies array to be: [getComments, id]",{"range":"91","text":"92"},{"range":"93","text":"90"},[1195,1197],"[refreshList]",[1040,1042],"[getOwner]",[1834,1838],"[getComments, id]",[620,622]]