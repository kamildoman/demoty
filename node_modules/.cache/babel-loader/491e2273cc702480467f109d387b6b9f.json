{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\login\\\\Documents\\\\python\\\\demotywatory\\\\demoty\\\\src\\\\SinglePageDemot.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport Demot from './Demot';\nimport SingleComment from './SingleComment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SinglePageDemot = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [demot, setDemot] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [doesExist, setDoesExist] = useState(true);\n  const [commentValue, setCommentValue] = useState(\"\");\n\n  function handleCommentChange() {}\n\n  function AddComment() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"comments-input\",\n        value: commentValue,\n        onChange: handleCommentChange,\n        type: \"text\",\n        placeholder: \"Add a comment...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"comments-button\",\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n\n  useEffect(() => {\n    async function getData() {\n      axios.get('http://127.0.0.1:8000/api/demots/' + id + '/').then(function (response) {\n        setDemot(response === null || response === void 0 ? void 0 : response.data);\n      }).catch(e => {\n        if (e.response.status === 404) {\n          setDoesExist(false);\n        }\n      });\n    }\n\n    async function getComments() {\n      let results = [];\n      axios.get('http://127.0.0.1:8000/api/comments/').then(function (response) {\n        response.data.forEach(comment => {\n          if (comment.demot === Number(id)) {\n            results.push(comment);\n          }\n        });\n        setComments(results);\n      });\n    }\n\n    getData();\n    getComments();\n  }, [id]);\n\n  if (doesExist) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Demot, {\n        id: demot.id,\n        whole: true,\n        title: demot.title,\n        subtitle: demot.subtitle,\n        image: demot.image,\n        upvote: demot.upvote,\n        downvote: demot.downvote,\n        ips: demot.ips\n      }, demot.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddComment, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(SingleComment, {\n        text: comment.comment_text,\n        date: comment.date\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sorry, it doesn't exist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 18\n    }, this);\n  }\n};\n\n_s(SinglePageDemot, \"97+pKHhirRzy9NUagD/UBvvTkKc=\", false, function () {\n  return [useParams];\n});\n\n_c = SinglePageDemot;\nexport default SinglePageDemot;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePageDemot\");","map":{"version":3,"sources":["C:/Users/login/Documents/python/demotywatory/demoty/src/SinglePageDemot.jsx"],"names":["React","useState","useEffect","useParams","axios","Demot","SingleComment","SinglePageDemot","id","demot","setDemot","comments","setComments","doesExist","setDoesExist","commentValue","setCommentValue","handleCommentChange","AddComment","getData","get","then","response","data","catch","e","status","getComments","results","forEach","comment","Number","push","title","subtitle","image","upvote","downvote","ips","map","comment_text","date"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport Demot from './Demot';\r\nimport SingleComment from './SingleComment';\r\n\r\nconst SinglePageDemot = () => {\r\n    const {id} = useParams();\r\n    const [demot, setDemot] = useState(\"\")\r\n    const [comments, setComments] = useState([])\r\n    const [doesExist, setDoesExist] = useState(true)\r\n    const [commentValue, setCommentValue] = useState(\"\")\r\n\r\n    function handleCommentChange(){\r\n        \r\n    }\r\n\r\n    function AddComment(){\r\n        return <div>\r\n        <input \r\n          id=\"comments-input\" value={commentValue} onChange={handleCommentChange}\r\n          type=\"text\" placeholder=\"Add a comment...\" />\r\n        <button type=\"submit\"     \r\n          className=\"comments-button\">Post</button>\r\n        </div>\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function getData(){\r\n            axios.get('http://127.0.0.1:8000/api/demots/' + id +'/')\r\n            .then(function (response) {\r\n                    setDemot(response?.data) \r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 404){\r\n                    setDoesExist(false)\r\n                }\r\n            })\r\n        }\r\n        async function getComments(){\r\n            let results = []\r\n            axios.get('http://127.0.0.1:8000/api/comments/')\r\n            .then(function(response){\r\n                response.data.forEach(comment => {\r\n                    if (comment.demot === Number(id)){\r\n                        results.push(comment)\r\n                    }\r\n                })\r\n                setComments(results)\r\n            })\r\n        }\r\n\r\n        getData();\r\n        getComments();\r\n        \r\n      }, [id])\r\n      if (doesExist){\r\n        return (\r\n            <div>\r\n                <Demot\r\n                  key= {demot.id} \r\n                  id = {demot.id}\r\n                  whole = {true}\r\n                  title={demot.title}\r\n                  subtitle={demot.subtitle}  \r\n                  image={demot.image}\r\n                  upvote={demot.upvote}\r\n                  downvote={demot.downvote}\r\n                  ips={demot.ips}\r\n                  />\r\n                  <AddComment />\r\n                  {comments.map(comment => (\r\n                      <SingleComment \r\n                          key={comment.id}\r\n                          text={comment.comment_text}\r\n                          date={comment.date}\r\n                      />\r\n                  ))}\r\n            </div>\r\n        )\r\n      }\r\n      else {\r\n          return <div><h2>Sorry, it doesn't exist</h2></div>\r\n      }\r\n    \r\n}\r\n\r\nexport default SinglePageDemot\r\n"]},"metadata":{},"sourceType":"module"}