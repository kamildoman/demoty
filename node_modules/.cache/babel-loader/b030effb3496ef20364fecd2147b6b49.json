{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\login\\\\Documents\\\\python\\\\demotywatory\\\\demoty\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Demot from \"./Demot\";\nimport Navbar from './Navbar';\nimport Pagination from './Pagination';\nimport SinglePageDemot from \"./SinglePageDemot\";\nimport './App.css';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [demots, setDemots] = useState([]);\n  const [username, setUsername] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(5);\n\n  const getToken = () => {\n    let header = {\n      'Authorization': 'Token ' + localStorage.getItem('LoginToken')\n    };\n    axios.get('http://127.0.0.1:8000/user/', {\n      headers: header\n    }).then(res => {\n      setUsername(res.data.username);\n    }).catch(e => {\n      if (e.response.status > 300) {\n        setUsername(\"Anonymous\");\n      }\n    });\n  };\n\n  const refreshList = () => {\n    axios.get('http://127.0.0.1:8000/api/demots/').then(function (response) {\n      setDemots(response.data.reverse());\n    }); // setTimeout(function() { getToken(); }, 1000);\n  };\n\n  useEffect(() => {\n    refreshList();\n    getToken();\n  }, []);\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = demots.slice(indexOfFirstPost, indexOfLastPost);\n\n  function paginate(pageNumber) {\n    setCurrentPage(pageNumber);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Hello \", username, /*#__PURE__*/_jsxDEV(Navbar, {\n        setCurrentPage: setCurrentPage,\n        refresh: refreshList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            exact: true,\n            element: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [currentPosts.map(demot => /*#__PURE__*/_jsxDEV(Demot, {\n                id: demot.id,\n                whole: true,\n                title: demot.title,\n                subtitle: demot.subtitle,\n                image: demot.image,\n                upvote: demot.upvote,\n                downvote: demot.downvote,\n                ips: demot.ips,\n                owner: demot.owner\n              }, demot.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 15\n              }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n                postsPerPage: postsPerPage,\n                totalPosts: demots.length,\n                paginate: paginate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 16\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/demot/:id\",\n            element: /*#__PURE__*/_jsxDEV(SinglePageDemot, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"7O0MvLQ7J75YIp0S51Uf8Y+qHKc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/login/Documents/python/demotywatory/demoty/src/App.js"],"names":["React","useState","useEffect","axios","Demot","Navbar","Pagination","SinglePageDemot","BrowserRouter","Router","Routes","Route","App","demots","setDemots","username","setUsername","currentPage","setCurrentPage","postsPerPage","getToken","header","localStorage","getItem","get","headers","then","res","data","catch","e","response","status","refreshList","reverse","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","map","demot","id","title","subtitle","image","upvote","downvote","ips","owner","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Demot from \"./Demot\"\nimport Navbar from './Navbar'\nimport Pagination from './Pagination'\nimport SinglePageDemot from \"./SinglePageDemot\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [demots, setDemots] = useState([])\n  const [username, setUsername] = useState(\"\")\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage] = useState(5)\n\n  const getToken = () => {\n    let header = {\n      'Authorization': 'Token ' + localStorage.getItem('LoginToken')}\n\n      axios.get('http://127.0.0.1:8000/user/', {headers: header,\n      }).then(res => {\n        setUsername(res.data.username)\n      }).catch(e => {\n        if (e.response.status > 300){\n            setUsername(\"Anonymous\")\n        }\n    })\n    }\n\n  const refreshList = () => {\n      axios.get('http://127.0.0.1:8000/api/demots/')\n      .then(function (response) {\n        setDemots(response.data.reverse()) \n      })\n      // setTimeout(function() { getToken(); }, 1000);\n    };\n\n    useEffect(() => {\n      refreshList()\n      getToken()\n    }, [])\n    \n    const indexOfLastPost = currentPage * postsPerPage\n    const indexOfFirstPost = indexOfLastPost - postsPerPage\n    const currentPosts = demots.slice(indexOfFirstPost, indexOfLastPost)\n\n    function paginate(pageNumber){\n      setCurrentPage(pageNumber)\n    }\n\n    return (<Router><div>Hello {username}\n              <Navbar setCurrentPage={setCurrentPage} refresh={refreshList}/>\n              <div className=\"main\">\n              <Routes>\n              <Route path=\"/\" exact element= {<>{currentPosts.map(demot =>(\n              <Demot\n              key= {demot.id} \n              id = {demot.id}\n              whole = {true}\n              title={demot.title}\n              subtitle={demot.subtitle}  \n              image={demot.image}\n              upvote={demot.upvote}\n              downvote={demot.downvote}\n              ips={demot.ips}\n              owner={demot.owner}\n              />\n            ))}<Pagination \n            postsPerPage={postsPerPage} \n            totalPosts={demots.length} \n            paginate={paginate}  \n            /></>} />\n\n            <Route path=\"/demot/:id\" element={<SinglePageDemot />} />\n            </Routes>\n            \n            </div>\n           \n            </div></Router>)\n    \n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}