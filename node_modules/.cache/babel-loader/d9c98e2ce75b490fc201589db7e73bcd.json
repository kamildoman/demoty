{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\login\\\\Documents\\\\python\\\\demotywatory\\\\demoty\\\\src\\\\SinglePageDemot.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport Demot from './Demot';\nimport SingleComment from './SingleComment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SinglePageDemot = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [demot, setDemot] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [doesExist, setDoesExist] = useState(true);\n  const [commentValue, setCommentValue] = useState(\"\");\n\n  function handleCommentChange(event) {\n    setCommentValue(event.target.value);\n  }\n\n  function addComment() {\n    var formData = new FormData();\n    formData.append(\"comment_text\", commentValue);\n    formData.append(\"demot\", id);\n    setCommentValue(\"\");\n    axios.post('/api/comments/', formData);\n    setTimeout(getComments, 1000);\n  }\n\n  function getComments() {\n    let results = [];\n    axios.get('/api/comments/').then(function (response) {\n      response.data.forEach(comment => {\n        if (comment.demot === Number(id)) {\n          results.push(comment);\n        }\n      });\n      setComments(results.reverse());\n    });\n  }\n\n  useEffect(() => {\n    async function getData() {\n      axios.get('/api/demots/' + id + '/').then(function (response) {\n        setDemot(response === null || response === void 0 ? void 0 : response.data);\n      }).catch(e => {\n        if (e.response.status === 404) {\n          setDoesExist(false);\n        }\n      });\n    }\n\n    getData();\n    getComments();\n  }, [id]);\n\n  if (doesExist) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Demot, {\n        id: demot.id,\n        whole: true,\n        title: demot.title,\n        subtitle: demot.subtitle,\n        image: demot.image,\n        upvote: demot.upvote,\n        downvote: demot.downvote,\n        ips: demot.ips\n      }, demot.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"comments-input\",\n          onChange: handleCommentChange,\n          value: commentValue,\n          placeholder: \"Add a comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: addComment,\n          className: \"comments-button\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(SingleComment, {\n        text: comment.comment_text,\n        date: comment.date\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sorry, it doesn't exist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 18\n    }, this);\n  }\n};\n\n_s(SinglePageDemot, \"97+pKHhirRzy9NUagD/UBvvTkKc=\", false, function () {\n  return [useParams];\n});\n\n_c = SinglePageDemot;\nexport default SinglePageDemot;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePageDemot\");","map":{"version":3,"sources":["C:/Users/login/Documents/python/demotywatory/demoty/src/SinglePageDemot.jsx"],"names":["React","useState","useEffect","useParams","axios","Demot","SingleComment","SinglePageDemot","id","demot","setDemot","comments","setComments","doesExist","setDoesExist","commentValue","setCommentValue","handleCommentChange","event","target","value","addComment","formData","FormData","append","post","setTimeout","getComments","results","get","then","response","data","forEach","comment","Number","push","reverse","getData","catch","e","status","title","subtitle","image","upvote","downvote","ips","map","comment_text","date"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport Demot from './Demot';\r\nimport SingleComment from './SingleComment';\r\n\r\nconst SinglePageDemot = () => {\r\n    const {id} = useParams();\r\n    const [demot, setDemot] = useState(\"\")\r\n    const [comments, setComments] = useState([])\r\n    const [doesExist, setDoesExist] = useState(true)\r\n    const [commentValue, setCommentValue] = useState(\"\")\r\n\r\n    function handleCommentChange(event){\r\n        setCommentValue(event.target.value)\r\n    }\r\n\r\n    function addComment(){\r\n        var formData = new FormData();\r\n        formData.append(\"comment_text\", commentValue);\r\n        formData.append(\"demot\", id);\r\n        setCommentValue(\"\")\r\n        \r\n        axios.post('/api/comments/', formData)\r\n        setTimeout(getComments, 1000)\r\n    }\r\n\r\n    function getComments(){\r\n        let results = []\r\n        axios.get('/api/comments/')\r\n        .then(function(response){\r\n            response.data.forEach(comment => {\r\n                if (comment.demot === Number(id)){\r\n                    results.push(comment)\r\n                }\r\n            })\r\n            setComments(results.reverse())\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function getData(){\r\n            axios.get('/api/demots/' + id +'/')\r\n            .then(function (response) {\r\n                    setDemot(response?.data) \r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 404){\r\n                    setDoesExist(false)\r\n                }\r\n            })\r\n        }\r\n       \r\n\r\n        getData();\r\n        getComments();\r\n        \r\n      }, [id])\r\n      if (doesExist){\r\n        return (\r\n            <div>\r\n                <Demot\r\n                  key= {demot.id} \r\n                  id = {demot.id}\r\n                  whole = {true}\r\n                  title={demot.title}\r\n                  subtitle={demot.subtitle}  \r\n                  image={demot.image}\r\n                  upvote={demot.upvote}\r\n                  downvote={demot.downvote}\r\n                  ips={demot.ips}\r\n                  />\r\n                  <div>\r\n                    <input \r\n                    id=\"comments-input\" onChange={handleCommentChange} value={commentValue} placeholder=\"Add a comment...\" />\r\n                    <button type=\"submit\" onClick={addComment}     \r\n                    className=\"comments-button\">Post</button>\r\n                </div>\r\n                  {comments.map(comment => (\r\n                      <SingleComment \r\n                          key={comment.id}\r\n                          text={comment.comment_text}\r\n                          date={comment.date}\r\n                      />\r\n                  ))}\r\n            </div>\r\n        )\r\n      }\r\n      else {\r\n          return <div><h2>Sorry, it doesn't exist</h2></div>\r\n      }\r\n    \r\n}\r\n\r\nexport default SinglePageDemot\r\n"]},"metadata":{},"sourceType":"module"}